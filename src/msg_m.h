//
// Generated file, do not edit! Created by nedtool 5.6 from msg.msg.
//

#ifndef __INET_MSG_M_H
#define __INET_MSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class Msg;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/contract/ipv4/Ipv4Address_m.h" // import inet.networklayer.contract.ipv4.Ipv4Address


namespace inet {

/**
 * Class generated from <tt>msg.msg:26</tt> by nedtool.
 * <pre>
 * class Msg extends FieldsChunk
 * {
 *     chunkLength = B(1);
 *     int id;
 *     string msg;
 *     int type;
 *     simtime_t sendTime;
 *     simtime_t arrivalTime;
 *     int reply = -1;
 * }
 * </pre>
 */
class Msg : public ::inet::FieldsChunk
{
  protected:
    int id = 0;
    omnetpp::opp_string msg;
    int type = 0;
    omnetpp::simtime_t sendTime = SIMTIME_ZERO;
    omnetpp::simtime_t arrivalTime = SIMTIME_ZERO;
    int reply = -1;

  private:
    void copy(const Msg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Msg&);

  public:
    Msg();
    Msg(const Msg& other);
    virtual ~Msg();
    Msg& operator=(const Msg& other);
    virtual Msg *dup() const override {return new Msg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getId() const;
    virtual void setId(int id);
    virtual const char * getMsg() const;
    virtual void setMsg(const char * msg);
    virtual int getType() const;
    virtual void setType(int type);
    virtual omnetpp::simtime_t getSendTime() const;
    virtual void setSendTime(omnetpp::simtime_t sendTime);
    virtual omnetpp::simtime_t getArrivalTime() const;
    virtual void setArrivalTime(omnetpp::simtime_t arrivalTime);
    virtual int getReply() const;
    virtual void setReply(int reply);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Msg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Msg& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_MSG_M_H

